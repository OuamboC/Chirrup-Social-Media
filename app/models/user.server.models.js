/**
 * In this file , we will create the functions that interact with the database.
 * Authentication workflow of the full project
 * I- A user creates an account(POST/user)
 *      1.A salt is auto generated and their password is hashed 
 *      2.The DB stores the username , salt ,hash ,and other user info
 * 
 * II- The user logs in (POST/login)
 *       1.The DB username, hash and salt is retrieved
 *       2.The incoming password hashed using the salt  from the DB
 *       3.The two hashes are compared 
 *       4.A token is generated and stored in the users table as session_token
 * III- The user requests an authenticated endpoint (e.g: POST/post)
 *        1.The token is sent as an X-Authoization header
 *        2.The token is checked against the tokens in the users table
 *        3.If no token exists, a 401 Unauthorized is returned 
 *        4.Else,(means if token exists) , continue processing the request.
 * IV- The user logs out (POST/logout)
 *        1.The token is removed from the DB
 *        2.No subsequent request can authenticate using that token
 * 
 * `crypto`: Module in a Node.js environment
 * `crypto.randomBytes`: Method used to generate random binary data (bytes) of the specified length which is 64 bytes in this case.
 * The number 64 represents the length of generated byte array
 * 
 */

//The variable "db" store the database of the app
const db = require("../../database"); // require in the database

//Require of the crypto library 
const crypto = require('crypto');


/** Description
 * Creates and returns a hash of the password and and salt as a Hexadecimal String
 */
const getHash = function (password, salt) {
    return crypto.pbkdf2Sync(password, salt, 100000, 256, 'sha256').toString('hex');
};

//Create a function called addUser and implement it
/**
 * This function will create an account into the database 
 * This function is going to take 2 parameters
 * 1. The first will have the user details as a JSON object
 * 2. The second will be a function called "done" that will be used as a callback
 * Once we have finished our DB interaction, we will execute the done function
 * to define what happens when addUser function has finished
 */
const addNewUser =(user, done) => {
    //Create the salt 
    const salt =crypto.randomBytes(64);
    //Convert to hash
    const hash = getHash(user.password, salt);

    //Create the sql variable to insert (via insert query) new data into the database 
   
    const sql ='INSERT INTO users (first_name, last_name, username, password, salt) VALUES(?, ?, ?, ?, ?)';
    //Create the values variable to store the req.body.params we need from the user
    
    let values = [user.first_name, user.last_name, user.username, hash, salt.toString('hex')];
    
    //For adding an User to the databse , we can use "db.run() function"
    /**
     * The run() function takes in three parameters.
     * 1.The SQL  statement to execute.
     * 2.Any parameters needed for the SQL statement 
     * 3.A function that will execute afterwards--(This is a callback function)
     */
    db.run(sql, values, function(err){
        //If an errors occurs  such as all values is not given by the user, display the error made by the user 
        if (err) {
            console.log(err); //log the error for debugging
            return done(err);
        }
        //if no errors , then the "done" callback passing a null to indicate no error at the matching id
        return done(null, this.lastID)
    });
}



//Create a new function to authenticate the User ( This will used when a user will try to login )
//Function to authenticate a user by checking their credentials in the database 
//Function takes in the username and the password from the user and a callback "done"
    const authenticateUser = (username, password, done) => {
        //Create the sql variable to retrieve (via SELECT query) data (user's credentials) from the database 
        //Get the id ,hashed password and salt from the DB
        const sql ='SELECT user_id, password, salt FROM users WHERE username=? '

        //Execute the SQL query to fecth user data 
        db.get(sql,[username],(err, row) => {
            //if error occurs such as all the values is not given by the user , pass it to the `done` callback
            if(err) return done(err)
            // if the username  is not  found  in the database , return  a 404(Not found) error
            if(!row) return done(404) //wrong username

            /*Salt is a random piece of data  which is added to the password before it runs through the hashing algorithm */
            //Here the condition is that if the row.salt (row which store the random piece of data added to the password) is equal to an unknown value (null) 
            //the DB  ,s et the salt to an empty string

            if(row.salt ===null) row.salt ='' 
            // if the row is not null ( the DB recognise the salt ), process to the following code 

            // This line convert the salt from a hexadecimal string to binary data
            let salt = Buffer.from(row.salt, 'hex') //Convert the salt from hex (how its encoded)
            
            //Here , we compare the user's password  with the hash'password(password+salt) in the DB
            //Passes the incoming password and salt from the DB to the getHash Function [getHash(password, salt)]

            if(row.password === getHash(password, salt)){ //Call the getHash password and compare with the saved hash 
                //If both matches , retur the user_id to indicate successful login
                return done(false, row.user_id)
            }else{
                //if the password don't match , return a `404 Not Found` error
                return done(404) //wrong password
            }
        });
    };



    //Create a function to check if a user has already logged in and retrieve their session_token 
    const getToken = (id, done) => {
        //Define the SQL query to retrieve the session_token FROM the users table WHERE 'user_id' matches the given 'id'
        const sql ='SELECT session_token FROM users WHERE user_id =?';

        //Use the db.get() fuction for a single-row result 
       db.get(sql, [id], (err,row) => {
        //checkk for errors i the database operation
        if(err) {
            //Handle the error and pass it to the `done` callback
            return done(err);
        }
        //Check if a session_token is found in the `row` object
        if(row && row.session_token) {
            // if a session_token is found , the user has logged in , so pass it to the `done` callback 
            return done(null, row.session_token);
        }else{
            //if no session_token is found ,it  means that the user never logged in , so return an empty value
            return done(null,null);
        }

       });
    };

    //Create a function to generate a new secure token for a user who has never logged in
    const setToken =(id,done) => {

        //This line generate a crptographically secure random byte array of 16 bytes and convert it to a hexadecimal string , creating a secure token 
        let token = crypto.randomBytes(16).toString('hex');
        
        // Define the SQL query to update data, setting the 'session_token' column to the new token value where `user_id` matches the given `id`.
        const sql ='UPDATE users SET session_token=? WHERE user_id=?'

        /**
         * The db.run()-executes a command on the db (In this case, UPDATE)
         * The run() function takes in 3 parameters :
         * 1.The SQL statement to execute
         * 2.The parameters to be passed into the SQL statement 
         * 3.A callback function that will be executed after the update is completed 
        */

        db.run(sql, [token, id], (err) => {
            //if the `user_id` mathes a record in the databse , pass the new token to  the `done` callback to create a n token for the user to login
            return done(err, token)
        });
    };


    /**
     * When a user logs out, update the token in the database to null(empty value)
     * This ensure the token is not deleted but is no longer usable
     * The function takjes a token and `done` callback as parameters
    */

    const removeToken = (token, done) => {
        //Define the sql query to Update the users table by setting the `session_token` to null( empty value) WHERE the `session_token` of a user matches the provided token
        const sql = 'UPDATE users SET session_token = null WHERE  session_token =?'

        //Execute the db.run() function to update the token

        db.run(sql, [token], (err)=> {
            //if the session_token of the user who wants to log out matches the record , set it to `null` and pass any errors to the `done`callabck
            if (this.changes === 0) return done(true); //
            return done(err);
        })
    }

    /**
     * Checks the token is valid
     * Get the user_id from the database when the token (session_token)matches the incoming token 
     * handles any errors
     * Create then a function  in this file havving in parameters (toen,done)
     */
    const getIDFromToken = (token, done) => {

        //Define the sql query to retrieve the user_id in the users table WHERE session_token mathes the incoming token
        const sql='SELECT user_id FROM users WHERE session_token=? '
        const params =[token]

        //Execute the db.get() function retrieve the user_id
        db.get(sql, params, (err,row) =>{
            //if an error occurs , pass it to the `done` callback 
            if(err){
                //console.log(err);
                return done(err)
            }
            //Checks if the token is valid
            if (row ){
                console.log(err);
                return done(null,row.user_id);
            }else{
                return done(true,null);
            }
        })

    }

//Exports the function "addUser" so it can be seen by other files (i.e: the controller)
module.exports ={
    addNewUser: addNewUser,
    authenticateUser: authenticateUser,
    setToken: setToken,
    getToken: getToken,
    removeToken: removeToken,
    getIDFromToken: getIDFromToken

}